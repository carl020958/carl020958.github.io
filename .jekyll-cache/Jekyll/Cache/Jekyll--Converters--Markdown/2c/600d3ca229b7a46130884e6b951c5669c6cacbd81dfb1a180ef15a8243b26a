I" <hr />
<h3 id="processing-users-using-python-operator">Processing Users Using Python Operator‚Äù</h3>
<ul>
  <li>Action Operator</li>
</ul>

<hr />

<h3 id="action-operator">Action Operator</h3>
<ul>
  <li>path - AIRFLOW_HOME/dag/user_processing.py</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># user_processing.py
</span><span class="p">...</span>
<span class="kn">from</span> <span class="nn">airflow.operators.python</span> <span class="kn">import</span> <span class="n">PythonOperator</span>
<span class="kn">from</span> <span class="nn">pandas</span> <span class="kn">import</span> <span class="n">json_normalize</span>
<span class="kn">import</span> <span class="nn">json</span>

<span class="c1"># user process method
</span><span class="k">def</span> <span class="nf">_processing_user</span><span class="p">(</span><span class="n">task_instance</span><span class="p">):</span>
    <span class="c1"># get data from extracting user
</span>    <span class="n">users</span> <span class="o">=</span> <span class="n">task_instance</span><span class="p">.</span><span class="n">xcom_pull</span><span class="p">(</span><span class="n">task_ids</span><span class="o">=</span><span class="p">[</span><span class="s">"extracting_user"</span><span class="p">])</span>
    
    <span class="c1"># check error
</span>    <span class="k">if</span> <span class="ow">not</span> <span class="nb">len</span><span class="p">(</span><span class="n">users</span><span class="p">)</span> <span class="ow">or</span> <span class="s">"results"</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">users</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
        <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">"User is empty"</span><span class="p">)</span>
    
    <span class="c1"># store the data in user
</span>    <span class="n">user</span> <span class="o">=</span> <span class="n">users</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s">"results"</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>

    <span class="c1"># get user data of interest
</span>    <span class="n">processed_user</span> <span class="o">=</span> <span class="n">json_normalize</span><span class="p">({</span>
        <span class="s">"firstname"</span><span class="p">:</span> <span class="n">user</span><span class="p">[</span><span class="s">"name"</span><span class="p">][</span><span class="s">"first"</span><span class="p">],</span>
        <span class="s">"lastname"</span><span class="p">:</span> <span class="n">user</span><span class="p">[</span><span class="s">"name"</span><span class="p">][</span><span class="s">"last"</span><span class="p">],</span>
        <span class="s">"country"</span><span class="p">:</span> <span class="n">user</span><span class="p">[</span><span class="s">"location"</span><span class="p">][</span><span class="s">"country"</span><span class="p">],</span>
        <span class="s">"username"</span><span class="p">:</span> <span class="n">user</span><span class="p">[</span><span class="s">"login"</span><span class="p">][</span><span class="s">"username"</span><span class="p">],</span>
        <span class="s">"password"</span><span class="p">:</span> <span class="n">user</span><span class="p">[</span><span class="s">"login"</span><span class="p">][</span><span class="s">"password"</span><span class="p">],</span>
        <span class="s">"email"</span><span class="p">:</span> <span class="n">user</span><span class="p">[</span><span class="s">"email"</span><span class="p">]</span>
    <span class="p">})</span>
  
    <span class="c1"># .to_csv function from pandas throw error if directory doesn't exist
</span>    <span class="n">path</span> <span class="o">=</span> <span class="s">"/Users/jisu/Dropbox_Carl/Dropbox/JISU/DE/airflow/tmp/processed_user.csv"</span>
    <span class="n">processed_user</span><span class="p">.</span><span class="n">to_csv</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">header</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="k">with</span> <span class="n">DAG</span><span class="p">(</span>
  <span class="p">...</span>
<span class="p">)</span> <span class="k">as</span> <span class="n">dag</span><span class="p">:</span>
    <span class="c1"># Action Operator
</span>    <span class="n">processing_user</span> <span class="o">=</span> <span class="n">PythonOperator</span><span class="p">(</span>
        <span class="n">task_id</span><span class="o">=</span><span class="s">"processing_user"</span><span class="p">,</span>
        <span class="n">python_callable</span><span class="o">=</span><span class="n">_processing_user</span>
    <span class="p">)</span>
</code></pre></div></div>
<hr />

<h3 id="test-airflow-task">Test Airflow Task</h3>
<ul>
  <li>allows to test a specific task
    <ul>
      <li>1) without checking for dependencies</li>
      <li>2) neither storing any medata related to the task</li>
    </ul>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># test my task (airflow tasks test [py_file] [dag_name] [execution_date])</span>
airflow tasks <span class="nb">test </span>user_processing processing_user 2022-01-07
</code></pre></div></div>

:ET