I"<hr />
<p><b>깔끔한 파이썬 탄탄한 백엔드</b></p>
<h3 id="ch3-첫-api-개발-시작">CH3 첫 API 개발 시작</h3>
<ul>
  <li>FLASK 설치</li>
  <li>API 기초적인 기능 구현(ping 엔드포인트 구현)</li>
  <li>API 실행</li>
</ul>

<hr />

<h3 id="python-virtual--environment-설치">Python Virtual  Environment 설치</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># terminal에 아래 명령어 입력하여 새로운 파이썬 가상 환경 생성
# 'api'에 희망하는 가상환경의 이름을 '3.9'에 희망하는 파이썬 버전을 입력
</span><span class="n">conda</span> <span class="n">create</span> <span class="o">--</span><span class="n">name</span> <span class="n">api</span> <span class="n">python</span><span class="o">=</span><span class="mf">3.9</span> 

<span class="c1"># 입력 후 Proceed([y]/n)? 라는 질문에 y 입력
</span></code></pre></div></div>
<hr />

<h3 id="python-virtual--environment--활성화--비활성화">Python Virtual  Environment  활성화 &amp; 비활성화</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># terminal에 아래 명령어 입력하여 새로운 파이썬 가상 환경 활성화
# name_of_venv에 활성화 희망하는 가상환경 이름 입력
</span><span class="n">source</span> <span class="n">activate</span> <span class="n">name_of_venv</span>

<span class="c1"># terminal에 아래 명령어 입력하여 파이썬 가상 환경 비활성화
</span><span class="n">source</span> <span class="n">deactivate</span>

<span class="c1"># terminal에 아래 명령어 입력하여 현재 존재하는 파이썬 가상환경 리스트 확인
</span><span class="n">conda</span> <span class="n">env</span> <span class="nb">list</span>
</code></pre></div></div>
<hr />

<h3 id="flask-설치">Flask 설치</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 파이썬 가상 환경 활성화 상태에서 아래 명령어 입력하여 flask 프레임워크 설치
</span><span class="n">pip</span> <span class="n">install</span> <span class="n">flask</span>

<span class="c1"># 설치 완료 후 python3 입력, python에서 다음 구문 입력하여 설치가 정상적으로 이루어졌는지 확인
</span><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>

<span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="s">'test'</span><span class="p">)</span>
</code></pre></div></div>
<hr />

<h3 id="ping-엔드포인트-구현">ping 엔드포인트 구현</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 폴더 만들기 (-p는 입력한 경로의 폴더를 모두 만들도록 함)
</span><span class="n">mkdir</span> <span class="o">-</span><span class="n">p</span> <span class="o">~/</span><span class="n">Projects</span><span class="o">/</span><span class="n">api</span>

<span class="c1"># api 디렉터리로 이동
</span><span class="n">cd</span> <span class="o">~/</span><span class="n">Projects</span><span class="o">/</span><span class="n">api</span>

<span class="c1"># app.py 파일 생성
</span><span class="n">vim</span> <span class="n">app</span><span class="p">.</span><span class="n">py</span>

<span class="c1"># app.py에 ping 엔드포인트 구현
# 1) vim으로 app.py 켜기
</span><span class="n">vim</span> <span class="n">app</span><span class="p">.</span><span class="n">py</span>

<span class="c1"># 2) app.py을 다음과 같이 수정
</span><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>

<span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>

<span class="o">@</span><span class="n">app</span><span class="p">.</span><span class="n">route</span><span class="p">(</span><span class="s">"/ping"</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">'GET'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">ping</span><span class="p">():</span>
    <span class="k">return</span> <span class="s">"pong"</span>
</code></pre></div></div>
<hr />

<h3 id="api-실행">API 실행</h3>
<ul>
  <li>가상 환경 활성화한 상태에서 실행해야함!</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># terminal에 아래 명령어 입력하여 API 실행
</span><span class="n">FLASK_APP</span><span class="o">=</span><span class="n">app</span><span class="p">.</span><span class="n">py</span> <span class="n">FLASK_DEBUG</span><span class="o">=</span><span class="mi">1</span> <span class="n">flask</span> <span class="n">run</span>

<span class="c1"># ping 엔드포인트가 제대로 작동하는지 실제 API에 접속해 테스트
# HOW? ➡️ ping 엔드포인트에 HTTP 요청을 보내기, 이를 위해 httpie 툴 사용
# terminal에 아래 명령어 입력하여 httpie 설치 
</span><span class="n">brew</span> <span class="n">install</span> <span class="n">httpie</span>

<span class="c1"># http라는 명령어를 통해 토미널에서 HTTP 요청 보내기
</span><span class="n">http</span> <span class="o">-</span><span class="n">v</span> <span class="n">GET</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">5000</span><span class="o">/</span><span class="n">ping</span>
        
<span class="c1"># 설명
# 1)http 2)-v 3)GET 4)http://localhost:5000/ping
# 1)http 명령어 사용하여 HTTP 요청을 터미널에 보낼 수 있게 됨
# 2)-v옵션은 'verbose' 옵션으로 HTTP 요청과 응답에 관한 추가적인 정보 출력
# 3)해당 HTTP 요청의 HTTP 매소드를 'GET'으로 지정
# 4)해당 HTTP 요청이 전송되어야야 할 엔드포인트의 고유 주소를 지정, 즉 127.0.0.1 IP 주소의 포트(port) 5000번에서 실행되고 있는 API의 '/ping' 주소에 지정되어 있는 엔드포인트로 HTTP 요청을 보내라고 명령한 것
</span></code></pre></div></div>
<ul>
  <li>정상적으로 ping 엔드포인트 호출된 화면</li>
</ul>

<p><img src="/img/backend/ch3_img1.png" alt="img" /></p>

:ET