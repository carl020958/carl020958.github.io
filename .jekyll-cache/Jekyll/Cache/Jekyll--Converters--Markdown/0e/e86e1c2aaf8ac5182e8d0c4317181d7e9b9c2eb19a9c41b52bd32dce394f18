I"H9<hr />
<p><b>DJANGO WEB DEVELOPMENT</b></p>
<h3 id="1-개발환경-구성하기">1. 개발환경 구성하기</h3>

<hr />

<h3 id="사전프로그램-설치">사전프로그램 설치</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">### VSCODE 설치
# https://code.visualstudio.com/download
# VSCODE에서 COMMAND + SHIFT + P 누른후 검색 창에 'shell' 입력 후 'Shell Command: Install 'code' command in PATH 클릭
</span>
<span class="c1">### Homebrew 설치
# https://brew.sh/index_ko 에서 Homebrew 설치하기 밑의 코드 복사한 다음에 터미널에 붙여놓기 후 Enter
# 아래 코드를 통해 brew 정상적으로 설치되었는지 확인
</span><span class="n">brew</span> <span class="o">--</span><span class="n">version</span>

<span class="c1">### Git 설치
</span><span class="n">brew</span> <span class="n">install</span> <span class="n">git</span>

<span class="c1"># 깃에서 사용할 사용자 이름 &amp; 이메일 설정
</span><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="k">global</span> <span class="n">user</span><span class="p">.</span><span class="n">name</span> <span class="s">'ZSU'</span>
<span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="k">global</span> <span class="n">user</span><span class="p">.</span><span class="n">email</span> <span class="s">'carl020958@korea.ac.kr'</span>

<span class="c1">### Git 관련 터미널 툴
# 1)TIG(깃 커밋 히스토리를 터미널에서 보여주는 툴)
</span><span class="n">homebrew</span> <span class="n">install</span> <span class="n">tig</span>
<span class="c1"># 2)Diff So Fancy(git diff의 출력 화면을 터미널상에서 더 보기 쉽게 출력해주는 깃 플러그인)
</span><span class="n">brew</span> <span class="n">install</span> <span class="n">diff</span><span class="o">-</span><span class="n">so</span><span class="o">-</span><span class="n">fancy</span>

<span class="c1">### Iterm2 설치
# https://iterm2.com
# 색상 테마 변경 : Preference ➡️ Profiles ➡️ Colors ➡️ Color Presets
# iTerm의 색 메타 페이지(https://github.com/mbadolato/iTerm2-Color-Schemes)를 통해 다른 색상 테마 선택 가능
</span>
<span class="c1">### ZSH 설치
</span><span class="n">brew</span> <span class="n">install</span> <span class="n">zsh</span> <span class="n">zsh</span><span class="o">-</span><span class="n">completions</span>

<span class="c1"># 설치 완료 후 default shell 변경
</span><span class="n">sudo</span> <span class="o">-</span><span class="n">s</span> <span class="s">'echo /usr/local/bin/zsh &gt;&gt; /etc/shells'</span> <span class="o">&amp;&amp;</span> <span class="n">chsh</span> <span class="o">-</span><span class="n">s</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">zsh</span> 

<span class="c1"># 터미널 창을 닫고 새로 열면 ZSH이 default shell로 변경됨
# 다음 명령어를 통해 ZSHdㅣ 정상적으로 default shell로 변경됐는지 확인
</span><span class="n">echo</span> <span class="err">$</span><span class="n">SHELL</span>

<span class="c1"># Oh My Zsh
</span><span class="n">sh</span> <span class="o">-</span><span class="n">c</span> <span class="s">"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"</span>

<span class="c1"># .zshrc 파일 수정시 다음 명령어 입력
</span><span class="n">vim</span> <span class="o">~/</span><span class="p">.</span><span class="n">zshrc</span>

<span class="c1"># ZSH plugin 중 zsh-syntax-highlighting &amp; history-substring-search 추천
</span>
<span class="c1"># ZSH로 변경 후 CONDA가 실행되지 않는 경우, ZSH상에서 콘다의 경로를 PATH 환경 변수에 포함
</span><span class="n">export</span> <span class="n">PATH</span><span class="o">=</span><span class="s">"/Users/ZSU/Miniconda3/bin:$PATH

# plugin 'zsh-autosuggestion' not found 해결
# 1) 설치(terminal)
brew install zsh-autosuggestions

# 2) 설치2(terminal)
git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions

# 3) .zshrc plugin에 추가(vim ~/.zshrc)
plugins=( [plugins...] zsh-syntax-highlighting)

# 4) 업데이트(terminal)
source ~/.zshrc

# plugin 'zsh-syntax-highlighting' not found 해결
# 1) 설치(terminal)
brew install zsh-syntax-highlighting

# 2) 설치2(terminal)
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting

# 3) plugin에 추가(vim ~/.zshrc)
plugins=([plugins...] zsh-syntax-highlighting)

# 4) 업데이트(terminal)
source ~/.zshrc
</span></code></pre></div></div>

<hr />

<h3 id="프로그램-설치">프로그램 설치</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 프로젝트 진행할 directory 만들기
</span><span class="n">mkdir</span> <span class="n">first_django</span>
<span class="n">cd</span> <span class="n">first_django</span>
<span class="c1"># 아래 코드를 통해 해당 directory에서 바로 VSCODE 실행 가능
</span><span class="n">code</span> <span class="p">.</span>

<span class="c1"># 파이썬 설치/관리 (Homebrew 이용)
</span><span class="n">brew</span> <span class="n">install</span> <span class="n">pyenv</span>
<span class="c1"># 파이썬 가상환경 관리
</span><span class="n">brew</span> <span class="n">install</span> <span class="n">pyenv</span><span class="o">-</span><span class="n">virtualenv</span>

<span class="c1"># zsh이면 아래 명령어 입력해 pyenv 설정
</span><span class="n">cd</span> <span class="o">~</span>
<span class="n">echo</span> <span class="s">'eval export PATH="$HOME/.pyenv/bin:$PATH"'</span> <span class="o">&gt;&gt;</span> <span class="p">.</span><span class="n">zshrc</span>
<span class="n">echo</span> <span class="s">'eval "$(pyenv init -)"'</span> <span class="o">&gt;&gt;</span> <span class="p">.</span><span class="n">zshrc</span>
<span class="n">echo</span> <span class="s">'eval "$(pyenv virtualenv-init  -)"'</span> <span class="o">&gt;&gt;</span> <span class="p">.</span><span class="n">zshrc</span>

<span class="c1"># # bash이면 아래 명령어 입력해 pyenv 설정
# cd~
# echo 'eval export PATH="$HOME/.pyenv/bin:$PATH"' &gt;&gt; .bash_profile
# echo 'eval "$(pyenv init -)"' &gt;&gt; .bash_profile
# echo 'eval "$(pyenv virtualenv-init -)"' &gt;&gt; .bash_profile
</span></code></pre></div></div>

<hr />

<h3 id="pyenv-활용해-python-설치">pyenv 활용해 python 설치</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># pyenv로 설치할 수 있는 python 버전 보기
</span><span class="n">pyenv</span> <span class="n">install</span> <span class="o">--</span><span class="nb">list</span>

<span class="c1"># 3.7.7 &amp; 3.8.2 설치
</span><span class="n">pyenv</span> <span class="n">install</span> <span class="mf">3.7</span><span class="p">.</span><span class="mi">7</span>
<span class="n">pyenv</span> <span class="n">install</span> <span class="mf">3.8</span><span class="p">.</span><span class="mi">2</span>

<span class="c1"># BUILD FAILED (OS X 11.5.2 using python-build 20180424) 에러를 아래 코드를 통해 해결
# xcode 재설치
</span><span class="n">sudo</span> <span class="n">rm</span> <span class="o">-</span><span class="n">rf</span> <span class="o">/</span><span class="n">Library</span><span class="o">/</span><span class="n">Developer</span><span class="o">/</span><span class="n">CommandLineTools</span>
<span class="n">xcode</span><span class="o">-</span><span class="n">select</span> <span class="o">--</span><span class="n">install</span>

<span class="c1"># brew 재설치
</span><span class="n">brew</span> <span class="n">reinstall</span> <span class="n">zlib</span> <span class="n">bzip2</span>

<span class="c1"># .zshrc 파일에 아래 코드 추가
</span><span class="n">export</span> <span class="n">PATH</span><span class="o">=</span><span class="s">"$HOME/.pyenv/bin:$PATH"</span>
<span class="n">export</span> <span class="n">PATH</span><span class="o">=</span><span class="s">"/usr/local/bin:$PATH"</span>

<span class="nb">eval</span> <span class="s">"$(pyenv init -)"</span>
<span class="nb">eval</span> <span class="s">"$(pyenv virtualenv-init -)"</span>
<span class="n">export</span> <span class="n">LDFLAGS</span><span class="o">=</span><span class="s">"-L/usr/local/opt/zlib/lib -L/usr/local/opt/bzip2/lib"</span>
<span class="n">export</span> <span class="n">CPPFLAGS</span><span class="o">=</span><span class="s">"-I/usr/local/opt/zlib/include -I/usr/local/opt/bzip2/include"</span>

<span class="c1"># 아래 코드를 통해 pyenv로 파이썬 3.7.7 &amp; 3.8.2 설치
# 3.7.7
</span><span class="n">CFLAGS</span><span class="o">=</span><span class="s">"-I$(brew --prefix openssl)/include -I$(brew --prefix bzip2)/include -I$(brew --prefix readline)/include -I$(xcrun --show-sdk-path)/usr/include"</span> <span class="n">LDFLAGS</span><span class="o">=</span><span class="s">"-L$(brew --prefix openssl)/lib -L$(brew --prefix readline)/lib -L$(brew --prefix zlib)/lib -L$(brew --prefix bzip2)/lib"</span> <span class="n">pyenv</span> <span class="n">install</span> <span class="o">--</span><span class="n">patch</span> <span class="mf">3.7</span><span class="p">.</span><span class="mi">7</span> <span class="o">&lt;</span> <span class="o">&lt;</span><span class="p">(</span><span class="n">curl</span> <span class="o">-</span><span class="n">sSL</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="p">.</span><span class="n">com</span><span class="o">/</span><span class="n">python</span><span class="o">/</span><span class="n">cpython</span><span class="o">/</span><span class="n">commit</span><span class="o">/</span><span class="mi">8</span><span class="n">ea6353</span><span class="p">.</span><span class="n">patch</span>\<span class="err">?</span><span class="n">full_index</span>\<span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="c1"># 3.8.2
</span><span class="n">CFLAGS</span><span class="o">=</span><span class="s">"-I$(brew --prefix openssl)/include -I$(brew --prefix bzip2)/include -I$(brew --prefix readline)/include -I$(xcrun --show-sdk-path)/usr/include"</span> <span class="n">LDFLAGS</span><span class="o">=</span><span class="s">"-L$(brew --prefix openssl)/lib -L$(brew --prefix readline)/lib -L$(brew --prefix zlib)/lib -L$(brew --prefix bzip2)/lib"</span> <span class="n">pyenv</span> <span class="n">install</span> <span class="o">--</span><span class="n">patch</span> <span class="mf">3.8</span><span class="p">.</span><span class="mi">2</span> <span class="o">&lt;</span> <span class="o">&lt;</span><span class="p">(</span><span class="n">curl</span> <span class="o">-</span><span class="n">sSL</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="p">.</span><span class="n">com</span><span class="o">/</span><span class="n">python</span><span class="o">/</span><span class="n">cpython</span><span class="o">/</span><span class="n">commit</span><span class="o">/</span><span class="mi">8</span><span class="n">ea6353</span><span class="p">.</span><span class="n">patch</span>\<span class="err">?</span><span class="n">full_index</span>\<span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="c1"># 설치된 python 버전 확인
</span><span class="n">pyenv</span> <span class="n">versions</span>
</code></pre></div></div>

<hr />

<h3 id="python-가상-환경-구성">python 가상 환경 구성</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 파이썬 가상환경 설치(pyenv virtualenv [파이썬_버전] [가상환경_이름])
</span><span class="n">pyenv</span> <span class="n">virtualenv</span> <span class="mf">3.7</span><span class="p">.</span><span class="mi">7</span> <span class="n">django</span><span class="o">-</span><span class="n">envs</span>

<span class="c1"># 컴퓨터 전체의 기본 파이썬(global) 설정(pyenv global [파이썬_버전])
</span><span class="n">pyenv</span> <span class="k">global</span> <span class="mf">3.8</span><span class="p">.</span><span class="mi">2</span>
<span class="c1"># 확인
</span><span class="n">pyenv</span> <span class="n">versions</span>

<span class="c1"># 특정 directory의 가상환경 설정(해당 directory 들어간 후, pyenv local [가상환경_이름])
</span><span class="n">cd</span> <span class="n">Projects</span><span class="o">/</span><span class="n">django</span>
<span class="n">pyenv</span> <span class="n">local</span> <span class="n">django</span><span class="o">-</span><span class="n">envs</span>

<span class="c1"># 확인, 참고로 해당 디렉터리 들어가면 자동으로 해당 가상환경으로 적용됨
</span><span class="n">pyenv</span> <span class="n">version</span>


<span class="c1"># 참고
# 가상환경 삭제 시
</span><span class="n">pyenv</span> <span class="n">uninstall</span> <span class="p">[</span><span class="n">가상환경_이름</span><span class="p">]</span>

<span class="c1"># 특정 버전의 파이썬 삭제 시
</span><span class="n">pyenv</span> <span class="n">uninstall</span> <span class="p">[</span><span class="n">파이썬_버전</span><span class="p">]</span>

</code></pre></div></div>

<hr />

<h3 id="django-설치">django 설치</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 가상환경에 들어가 있는 상태에서 실행, 참고로 django는 해당 directory(first_django)가 아닌 가상환경(django-envs)에 설치되는 것임
</span><span class="n">pip</span> <span class="n">install</span> <span class="n">django</span><span class="o">==</span><span class="mf">2.2</span>
<span class="c1"># 확인
</span><span class="n">django</span><span class="o">-</span><span class="n">admin</span> <span class="o">--</span><span class="n">version</span>

<span class="c1"># 설치되어있는 패키지 확인
</span><span class="n">pip</span> <span class="nb">list</span>
</code></pre></div></div>

<hr />
:ET