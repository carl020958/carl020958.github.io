I"u!<hr />
<h3 id="writing-efficient-python-code">Writing Efficient Python Code</h3>
<ul>
  <li>PART2</li>
  <li><code class="language-plaintext highlighter-rouge">%timeit</code>을 통해 runtime을 examine할 수 있음
    <ul>
      <li>-r2를 통해 전체 run 횟수를, -n을 통해 한 run에서 몇 회 반복할지 설정 가능</li>
      <li><code class="language-plaintext highlighter-rouge">%%timeit</code>을 통해 multiple-line code의 runtime을 examine할 수 있음</li>
      <li>ns = nanosecond 10^-9</li>
      <li>µs(us) = microsecond 10^-6</li>
      <li>ms = millisecond 10^-3</li>
      <li>s = second 10^0</li>
      <li>ipython에서만 가능(Jupyter notebook에서도 가능), script에 쓰고 싶은 경우 tiemit modeul 사용</li>
    </ul>
  </li>
  <li>line profiler 라이브러리의 <code class="language-plaintext highlighter-rouge">%lprun</code>을 통해 line 별 runtime을 examine할 수 있음
<br /><br /></li>
  <li>memory profiler 라이브러리의 <code class="language-plaintext highlighter-rouge">%mprun</code>을 통해 lineq 별 memory를 examine할 수 있음
    <ul>
      <li>function examine 위해서는 다른 파일로부터 function을 import해야함</li>
    </ul>
  </li>
</ul>

<hr />

<h3 id="timeit">%timeit</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%</span><span class="n">timeit</span> <span class="p">[</span><span class="n">num</span> <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">51</span><span class="p">)]</span>
<span class="o">%</span><span class="n">timeit</span> <span class="p">[</span><span class="o">*</span><span class="nb">range</span><span class="p">(</span><span class="mi">51</span><span class="p">)]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2.03 µs ± 90.2 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
594 ns ± 53.3 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%</span><span class="n">timeit</span> <span class="o">-</span><span class="n">r2</span> <span class="o">-</span><span class="n">n10</span> <span class="p">[</span><span class="o">*</span><span class="nb">range</span><span class="p">(</span><span class="mi">51</span><span class="p">)]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>708 ns ± 65 ns per loop (mean ± std. dev. of 2 runs, 10 loops each)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%</span><span class="n">timeit</span> <span class="nb">list</span><span class="p">()</span>
<span class="o">%</span><span class="n">timeit</span> <span class="p">[]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>83.8 ns ± 8.9 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)
28.4 ns ± 1.35 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)
</code></pre></div></div>

<hr />

<h3 id="timeit-1">%%timeit</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%%</span><span class="n">timeit</span> <span class="o">-</span><span class="n">r2</span> <span class="o">-</span><span class="n">n10</span>
<span class="n">num_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="n">mul_num_list</span> <span class="o">=</span> <span class="p">[]</span>
<span class="p">[</span><span class="n">mul_num_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">num</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span> <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">num_list</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2.31 µs ± 781 ns per loop (mean ± std. dev. of 2 runs, 10 loops each)
</code></pre></div></div>

<hr />

<h3 id="lprun">%lprun</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Jupyter Notebook에서 패키지 설치
# import sys
# !{sys.executable} -m pip install line_profiler
</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="o">%</span><span class="n">load_ext</span> <span class="n">line_profiler</span>

<span class="n">heroes</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Batman'</span><span class="p">]</span>
<span class="n">hts</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mf">188.0</span><span class="p">])</span>
<span class="n">wts</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mf">95.0</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">convert_units_broadcast</span><span class="p">(</span><span class="n">heroes</span><span class="p">,</span> <span class="n">heights</span><span class="p">,</span> <span class="n">weights</span><span class="p">):</span>

    <span class="c1"># Array broadcasting instead of list comprehension
</span>    <span class="n">new_hts</span> <span class="o">=</span> <span class="n">heights</span> <span class="o">*</span> <span class="mf">0.39370</span>
    <span class="n">new_wts</span> <span class="o">=</span> <span class="n">weights</span> <span class="o">*</span> <span class="mf">2.20462</span>

    <span class="n">hero_data</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">hero</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">heroes</span><span class="p">):</span>
        <span class="n">hero_data</span><span class="p">[</span><span class="n">hero</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">new_hts</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">new_wts</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>

    <span class="k">return</span> <span class="n">hero_data</span>

<span class="o">%</span><span class="n">lprun</span> <span class="o">-</span><span class="n">f</span> <span class="n">convert_units_broadcast</span> <span class="n">convert_units_broadcast</span><span class="p">(</span><span class="n">heroes</span><span class="p">,</span> <span class="n">hts</span><span class="p">,</span> <span class="n">wts</span><span class="p">)</span>

<span class="c1"># time이 적을수록 gut!
</span></code></pre></div></div>

<hr />

<h3 id="mprun">%mprun</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Jupyter Notebook에서 패키지 설치
# import sys
# !{sys.executable} -m pip install memory_profiler
</span>
<span class="kn">from</span> <span class="nn">hero_funcs</span> <span class="kn">import</span> <span class="n">convert_units</span>

<span class="o">%</span><span class="n">load_ext</span> <span class="n">memory_profiler</span>
<span class="o">%</span><span class="n">mprun</span> <span class="o">-</span><span class="n">f</span> <span class="n">convert_units</span> <span class="n">convert_units</span><span class="p">(</span><span class="n">heroes</span><span class="p">,</span> <span class="n">hts</span><span class="p">,</span> <span class="n">wts</span><span class="p">)</span>

<span class="c1"># Mem usage가 적을수록 gut!
</span></code></pre></div></div>
:ET