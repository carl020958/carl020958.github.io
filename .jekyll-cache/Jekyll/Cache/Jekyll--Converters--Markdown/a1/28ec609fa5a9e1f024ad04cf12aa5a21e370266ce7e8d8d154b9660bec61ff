I"jù<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># import data
</span><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="n">baseball_df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'baseball_stats.csv'</span><span class="p">)</span>
<span class="n">baseball_df</span><span class="p">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Team</th>
      <th>League</th>
      <th>Year</th>
      <th>RS</th>
      <th>RA</th>
      <th>W</th>
      <th>OBP</th>
      <th>SLG</th>
      <th>BA</th>
      <th>Playoffs</th>
      <th>RankSeason</th>
      <th>RankPlayoffs</th>
      <th>G</th>
      <th>OOBP</th>
      <th>OSLG</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>ARI</td>
      <td>NL</td>
      <td>2012</td>
      <td>734</td>
      <td>688</td>
      <td>81</td>
      <td>0.328</td>
      <td>0.418</td>
      <td>0.259</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>162</td>
      <td>0.317</td>
      <td>0.415</td>
    </tr>
    <tr>
      <th>1</th>
      <td>ATL</td>
      <td>NL</td>
      <td>2012</td>
      <td>700</td>
      <td>600</td>
      <td>94</td>
      <td>0.320</td>
      <td>0.389</td>
      <td>0.247</td>
      <td>1</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>162</td>
      <td>0.306</td>
      <td>0.378</td>
    </tr>
    <tr>
      <th>2</th>
      <td>BAL</td>
      <td>AL</td>
      <td>2012</td>
      <td>712</td>
      <td>705</td>
      <td>93</td>
      <td>0.311</td>
      <td>0.417</td>
      <td>0.247</td>
      <td>1</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>162</td>
      <td>0.315</td>
      <td>0.403</td>
    </tr>
    <tr>
      <th>3</th>
      <td>BOS</td>
      <td>AL</td>
      <td>2012</td>
      <td>734</td>
      <td>806</td>
      <td>69</td>
      <td>0.315</td>
      <td>0.415</td>
      <td>0.260</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>162</td>
      <td>0.331</td>
      <td>0.428</td>
    </tr>
    <tr>
      <th>4</th>
      <td>CHC</td>
      <td>NL</td>
      <td>2012</td>
      <td>613</td>
      <td>759</td>
      <td>61</td>
      <td>0.302</td>
      <td>0.378</td>
      <td>0.240</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>162</td>
      <td>0.335</td>
      <td>0.424</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">row</span> <span class="ow">in</span> <span class="n">baseball_df</span><span class="p">.</span><span class="n">head</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="n">iterrows</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">row</span><span class="p">)</span>


<span class="k">for</span> <span class="n">series</span> <span class="ow">in</span> <span class="n">baseball_df</span><span class="p">.</span><span class="n">head</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="n">iterrows</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="n">series</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s">'Team'</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0 Team              ARI
League             NL
Year             2012
RS                734
RA                688
W                  81
OBP             0.328
SLG             0.418
BA              0.259
Playoffs            0
RankSeason        NaN
RankPlayoffs      NaN
G                 162
OOBP            0.317
OSLG            0.415
Name: 0, dtype: object
ARI
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">calc_run_diff</span><span class="p">(</span><span class="n">run_s</span><span class="p">,</span> <span class="n">run_a</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">run_s</span> <span class="o">-</span> <span class="n">run_a</span> 

<span class="n">run_diffs</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">row</span> <span class="ow">in</span> <span class="n">baseball_df</span><span class="p">.</span><span class="n">iterrows</span><span class="p">():</span>
    <span class="n">run_scored</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'RS'</span><span class="p">]</span>
    <span class="n">run_allowed</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'RA'</span><span class="p">]</span>
    
    <span class="n">run_diff</span> <span class="o">=</span> <span class="n">calc_run_diff</span><span class="p">(</span><span class="n">run_scored</span><span class="p">,</span> <span class="n">run_allowed</span><span class="p">)</span>
    
    <span class="n">run_diffs</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">run_diff</span><span class="p">)</span>
    
<span class="n">baseball_df</span><span class="p">[</span><span class="s">'RD'</span><span class="p">]</span> <span class="o">=</span> <span class="n">run_diffs</span>

<span class="n">baseball_df</span><span class="p">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Team</th>
      <th>League</th>
      <th>Year</th>
      <th>RS</th>
      <th>RA</th>
      <th>W</th>
      <th>OBP</th>
      <th>SLG</th>
      <th>BA</th>
      <th>Playoffs</th>
      <th>RankSeason</th>
      <th>RankPlayoffs</th>
      <th>G</th>
      <th>OOBP</th>
      <th>OSLG</th>
      <th>RD</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>ARI</td>
      <td>NL</td>
      <td>2012</td>
      <td>734</td>
      <td>688</td>
      <td>81</td>
      <td>0.328</td>
      <td>0.418</td>
      <td>0.259</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>162</td>
      <td>0.317</td>
      <td>0.415</td>
      <td>46</td>
    </tr>
    <tr>
      <th>1</th>
      <td>ATL</td>
      <td>NL</td>
      <td>2012</td>
      <td>700</td>
      <td>600</td>
      <td>94</td>
      <td>0.320</td>
      <td>0.389</td>
      <td>0.247</td>
      <td>1</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>162</td>
      <td>0.306</td>
      <td>0.378</td>
      <td>100</td>
    </tr>
    <tr>
      <th>2</th>
      <td>BAL</td>
      <td>AL</td>
      <td>2012</td>
      <td>712</td>
      <td>705</td>
      <td>93</td>
      <td>0.311</td>
      <td>0.417</td>
      <td>0.247</td>
      <td>1</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>162</td>
      <td>0.315</td>
      <td>0.403</td>
      <td>7</td>
    </tr>
    <tr>
      <th>3</th>
      <td>BOS</td>
      <td>AL</td>
      <td>2012</td>
      <td>734</td>
      <td>806</td>
      <td>69</td>
      <td>0.315</td>
      <td>0.415</td>
      <td>0.260</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>162</td>
      <td>0.331</td>
      <td>0.428</td>
      <td>-72</td>
    </tr>
    <tr>
      <th>4</th>
      <td>CHC</td>
      <td>NL</td>
      <td>2012</td>
      <td>613</td>
      <td>759</td>
      <td>61</td>
      <td>0.302</td>
      <td>0.378</td>
      <td>0.240</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>162</td>
      <td>0.335</td>
      <td>0.424</td>
      <td>-146</td>
    </tr>
  </tbody>
</table>
</div>

<h3 id="iterrows">iterrows</h3>
<ul>
  <li>1) loop over pit_df and print each row</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">row</span> <span class="ow">in</span> <span class="n">baseball_df</span><span class="p">.</span><span class="n">head</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="n">iterrows</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">row</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0 Team              ARI
League             NL
Year             2012
RS                734
RA                688
W                  81
OBP             0.328
SLG             0.418
BA              0.259
Playoffs            0
RankSeason        NaN
RankPlayoffs      NaN
G                 162
OOBP            0.317
OSLG            0.415
Name: 0, dtype: object
</code></pre></div></div>

<h3 id="itertuples">itertuples</h3>
<ul>
  <li>In what year within your DataFrame did the New York Yankees have the highest run differential?</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">yankees_df</span> <span class="o">=</span> <span class="n">baseball_df</span><span class="p">[</span><span class="n">baseball_df</span><span class="p">.</span><span class="n">Team</span> <span class="o">==</span> <span class="s">'NYY'</span><span class="p">]</span>

<span class="n">run_diff</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">yankees_df</span><span class="p">.</span><span class="n">itertuples</span><span class="p">():</span>
    <span class="n">RS</span> <span class="o">=</span> <span class="n">row</span><span class="p">.</span><span class="n">RS</span>
    <span class="n">RA</span> <span class="o">=</span> <span class="n">row</span><span class="p">.</span><span class="n">RA</span>
    <span class="n">run_diff</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="n">calc_run_diff</span><span class="p">(</span><span class="n">RS</span><span class="p">,</span> <span class="n">RA</span><span class="p">)))</span>

<span class="n">yankees_df</span><span class="p">[</span><span class="s">'RD'</span><span class="p">]</span><span class="o">=</span> <span class="n">run_diff</span>

<span class="n">yankees_df</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s">'RD'</span><span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/var/folders/6k/3q6ftyyn3v1gswgzvq0rxsf80000gn/T/ipykernel_26327/2096681897.py:9: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  yankees_df['RD']= run_diff
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Team</th>
      <th>League</th>
      <th>Year</th>
      <th>RS</th>
      <th>RA</th>
      <th>W</th>
      <th>OBP</th>
      <th>SLG</th>
      <th>BA</th>
      <th>Playoffs</th>
      <th>RankSeason</th>
      <th>RankPlayoffs</th>
      <th>G</th>
      <th>OOBP</th>
      <th>OSLG</th>
      <th>RD</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>439</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1998</td>
      <td>965</td>
      <td>656</td>
      <td>114</td>
      <td>0.364</td>
      <td>0.460</td>
      <td>0.288</td>
      <td>1</td>
      <td>1.0</td>
      <td>1.0</td>
      <td>162</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>309</td>
    </tr>
    <tr>
      <th>48</th>
      <td>NYY</td>
      <td>AL</td>
      <td>2011</td>
      <td>867</td>
      <td>657</td>
      <td>97</td>
      <td>0.343</td>
      <td>0.444</td>
      <td>0.263</td>
      <td>1</td>
      <td>2.0</td>
      <td>4.0</td>
      <td>162</td>
      <td>0.322</td>
      <td>0.399</td>
      <td>210</td>
    </tr>
    <tr>
      <th>468</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1997</td>
      <td>891</td>
      <td>688</td>
      <td>96</td>
      <td>0.362</td>
      <td>0.436</td>
      <td>0.287</td>
      <td>1</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>162</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>203</td>
    </tr>
    <tr>
      <th>319</th>
      <td>NYY</td>
      <td>AL</td>
      <td>2002</td>
      <td>897</td>
      <td>697</td>
      <td>103</td>
      <td>0.354</td>
      <td>0.455</td>
      <td>0.275</td>
      <td>1</td>
      <td>1.0</td>
      <td>4.0</td>
      <td>161</td>
      <td>0.309</td>
      <td>0.395</td>
      <td>200</td>
    </tr>
    <tr>
      <th>168</th>
      <td>NYY</td>
      <td>AL</td>
      <td>2007</td>
      <td>968</td>
      <td>777</td>
      <td>94</td>
      <td>0.366</td>
      <td>0.463</td>
      <td>0.290</td>
      <td>1</td>
      <td>2.0</td>
      <td>4.0</td>
      <td>162</td>
      <td>0.340</td>
      <td>0.417</td>
      <td>191</td>
    </tr>
    <tr>
      <th>914</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1977</td>
      <td>831</td>
      <td>651</td>
      <td>100</td>
      <td>0.344</td>
      <td>0.444</td>
      <td>0.281</td>
      <td>1</td>
      <td>3.0</td>
      <td>1.0</td>
      <td>162</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>180</td>
    </tr>
    <tr>
      <th>732</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1985</td>
      <td>839</td>
      <td>660</td>
      <td>97</td>
      <td>0.344</td>
      <td>0.425</td>
      <td>0.267</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>161</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>179</td>
    </tr>
    <tr>
      <th>409</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1999</td>
      <td>900</td>
      <td>731</td>
      <td>98</td>
      <td>0.366</td>
      <td>0.453</td>
      <td>0.282</td>
      <td>1</td>
      <td>3.0</td>
      <td>1.0</td>
      <td>162</td>
      <td>0.329</td>
      <td>0.400</td>
      <td>169</td>
    </tr>
    <tr>
      <th>1206</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1963</td>
      <td>714</td>
      <td>547</td>
      <td>104</td>
      <td>0.309</td>
      <td>0.403</td>
      <td>0.252</td>
      <td>1</td>
      <td>1.0</td>
      <td>2.0</td>
      <td>161</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>167</td>
    </tr>
    <tr>
      <th>78</th>
      <td>NYY</td>
      <td>AL</td>
      <td>2010</td>
      <td>859</td>
      <td>693</td>
      <td>95</td>
      <td>0.350</td>
      <td>0.436</td>
      <td>0.267</td>
      <td>1</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>162</td>
      <td>0.322</td>
      <td>0.399</td>
      <td>166</td>
    </tr>
    <tr>
      <th>198</th>
      <td>NYY</td>
      <td>AL</td>
      <td>2006</td>
      <td>930</td>
      <td>767</td>
      <td>97</td>
      <td>0.363</td>
      <td>0.461</td>
      <td>0.285</td>
      <td>1</td>
      <td>1.0</td>
      <td>4.0</td>
      <td>162</td>
      <td>0.326</td>
      <td>0.413</td>
      <td>163</td>
    </tr>
    <tr>
      <th>108</th>
      <td>NYY</td>
      <td>AL</td>
      <td>2009</td>
      <td>915</td>
      <td>753</td>
      <td>103</td>
      <td>0.362</td>
      <td>0.478</td>
      <td>0.283</td>
      <td>1</td>
      <td>1.0</td>
      <td>1.0</td>
      <td>162</td>
      <td>0.327</td>
      <td>0.408</td>
      <td>162</td>
    </tr>
    <tr>
      <th>289</th>
      <td>NYY</td>
      <td>AL</td>
      <td>2003</td>
      <td>877</td>
      <td>716</td>
      <td>101</td>
      <td>0.356</td>
      <td>0.453</td>
      <td>0.271</td>
      <td>1</td>
      <td>1.0</td>
      <td>2.0</td>
      <td>163</td>
      <td>0.314</td>
      <td>0.407</td>
      <td>161</td>
    </tr>
    <tr>
      <th>836</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1980</td>
      <td>820</td>
      <td>662</td>
      <td>103</td>
      <td>0.343</td>
      <td>0.425</td>
      <td>0.267</td>
      <td>1</td>
      <td>1.0</td>
      <td>3.0</td>
      <td>162</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>158</td>
    </tr>
    <tr>
      <th>940</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1976</td>
      <td>730</td>
      <td>575</td>
      <td>97</td>
      <td>0.328</td>
      <td>0.389</td>
      <td>0.269</td>
      <td>1</td>
      <td>3.0</td>
      <td>2.0</td>
      <td>159</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>155</td>
    </tr>
    <tr>
      <th>888</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1978</td>
      <td>735</td>
      <td>582</td>
      <td>100</td>
      <td>0.329</td>
      <td>0.388</td>
      <td>0.267</td>
      <td>1</td>
      <td>1.0</td>
      <td>1.0</td>
      <td>163</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>153</td>
    </tr>
    <tr>
      <th>1186</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1964</td>
      <td>730</td>
      <td>577</td>
      <td>99</td>
      <td>0.317</td>
      <td>0.387</td>
      <td>0.253</td>
      <td>1</td>
      <td>1.0</td>
      <td>2.0</td>
      <td>164</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>153</td>
    </tr>
    <tr>
      <th>602</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1990</td>
      <td>603</td>
      <td>749</td>
      <td>67</td>
      <td>0.300</td>
      <td>0.366</td>
      <td>0.241</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>162</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>146</td>
    </tr>
    <tr>
      <th>1226</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1962</td>
      <td>817</td>
      <td>680</td>
      <td>96</td>
      <td>0.337</td>
      <td>0.426</td>
      <td>0.267</td>
      <td>1</td>
      <td>2.0</td>
      <td>1.0</td>
      <td>162</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>137</td>
    </tr>
    <tr>
      <th>18</th>
      <td>NYY</td>
      <td>AL</td>
      <td>2012</td>
      <td>804</td>
      <td>668</td>
      <td>95</td>
      <td>0.337</td>
      <td>0.453</td>
      <td>0.265</td>
      <td>1</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>162</td>
      <td>0.311</td>
      <td>0.419</td>
      <td>136</td>
    </tr>
    <tr>
      <th>576</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1991</td>
      <td>674</td>
      <td>777</td>
      <td>71</td>
      <td>0.316</td>
      <td>0.387</td>
      <td>0.256</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>162</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>103</td>
    </tr>
    <tr>
      <th>1126</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1967</td>
      <td>522</td>
      <td>621</td>
      <td>72</td>
      <td>0.296</td>
      <td>0.317</td>
      <td>0.225</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>163</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>99</td>
    </tr>
    <tr>
      <th>228</th>
      <td>NYY</td>
      <td>AL</td>
      <td>2005</td>
      <td>886</td>
      <td>789</td>
      <td>95</td>
      <td>0.355</td>
      <td>0.450</td>
      <td>0.276</td>
      <td>1</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>162</td>
      <td>0.332</td>
      <td>0.422</td>
      <td>97</td>
    </tr>
    <tr>
      <th>628</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1989</td>
      <td>698</td>
      <td>792</td>
      <td>74</td>
      <td>0.331</td>
      <td>0.391</td>
      <td>0.269</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>161</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>94</td>
    </tr>
    <tr>
      <th>964</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1975</td>
      <td>681</td>
      <td>588</td>
      <td>83</td>
      <td>0.325</td>
      <td>0.382</td>
      <td>0.264</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>160</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>93</td>
    </tr>
    <tr>
      <th>349</th>
      <td>NYY</td>
      <td>AL</td>
      <td>2001</td>
      <td>804</td>
      <td>713</td>
      <td>95</td>
      <td>0.334</td>
      <td>0.435</td>
      <td>0.267</td>
      <td>1</td>
      <td>3.0</td>
      <td>2.0</td>
      <td>161</td>
      <td>0.318</td>
      <td>0.398</td>
      <td>91</td>
    </tr>
    <tr>
      <th>259</th>
      <td>NYY</td>
      <td>AL</td>
      <td>2004</td>
      <td>897</td>
      <td>808</td>
      <td>101</td>
      <td>0.353</td>
      <td>0.458</td>
      <td>0.268</td>
      <td>1</td>
      <td>2.0</td>
      <td>3.0</td>
      <td>162</td>
      <td>0.328</td>
      <td>0.432</td>
      <td>89</td>
    </tr>
    <tr>
      <th>496</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1996</td>
      <td>871</td>
      <td>787</td>
      <td>92</td>
      <td>0.360</td>
      <td>0.436</td>
      <td>0.288</td>
      <td>1</td>
      <td>3.0</td>
      <td>1.0</td>
      <td>162</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>84</td>
    </tr>
    <tr>
      <th>758</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1984</td>
      <td>758</td>
      <td>679</td>
      <td>87</td>
      <td>0.339</td>
      <td>0.404</td>
      <td>0.276</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>162</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>79</td>
    </tr>
    <tr>
      <th>1060</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1970</td>
      <td>680</td>
      <td>612</td>
      <td>93</td>
      <td>0.324</td>
      <td>0.365</td>
      <td>0.251</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>163</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>68</td>
    </tr>
    <tr>
      <th>784</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1983</td>
      <td>770</td>
      <td>703</td>
      <td>91</td>
      <td>0.337</td>
      <td>0.416</td>
      <td>0.273</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>162</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>67</td>
    </tr>
    <tr>
      <th>862</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1979</td>
      <td>734</td>
      <td>672</td>
      <td>89</td>
      <td>0.328</td>
      <td>0.406</td>
      <td>0.266</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>160</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>62</td>
    </tr>
    <tr>
      <th>138</th>
      <td>NYY</td>
      <td>AL</td>
      <td>2008</td>
      <td>789</td>
      <td>727</td>
      <td>89</td>
      <td>0.342</td>
      <td>0.427</td>
      <td>0.271</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>162</td>
      <td>0.329</td>
      <td>0.405</td>
      <td>62</td>
    </tr>
    <tr>
      <th>524</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1993</td>
      <td>821</td>
      <td>761</td>
      <td>88</td>
      <td>0.353</td>
      <td>0.435</td>
      <td>0.279</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>162</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>60</td>
    </tr>
    <tr>
      <th>706</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1986</td>
      <td>797</td>
      <td>738</td>
      <td>90</td>
      <td>0.347</td>
      <td>0.430</td>
      <td>0.271</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>162</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>59</td>
    </tr>
    <tr>
      <th>379</th>
      <td>NYY</td>
      <td>AL</td>
      <td>2000</td>
      <td>871</td>
      <td>814</td>
      <td>87</td>
      <td>0.354</td>
      <td>0.450</td>
      <td>0.277</td>
      <td>1</td>
      <td>5.0</td>
      <td>1.0</td>
      <td>161</td>
      <td>0.336</td>
      <td>0.422</td>
      <td>57</td>
    </tr>
    <tr>
      <th>988</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1974</td>
      <td>671</td>
      <td>623</td>
      <td>89</td>
      <td>0.324</td>
      <td>0.368</td>
      <td>0.263</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>162</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>48</td>
    </tr>
    <tr>
      <th>1012</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1973</td>
      <td>641</td>
      <td>610</td>
      <td>80</td>
      <td>0.322</td>
      <td>0.378</td>
      <td>0.261</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>162</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>31</td>
    </tr>
    <tr>
      <th>680</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1987</td>
      <td>788</td>
      <td>758</td>
      <td>89</td>
      <td>0.336</td>
      <td>0.418</td>
      <td>0.262</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>162</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>30</td>
    </tr>
    <tr>
      <th>1083</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1969</td>
      <td>562</td>
      <td>587</td>
      <td>80</td>
      <td>0.308</td>
      <td>0.344</td>
      <td>0.235</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>162</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>25</td>
    </tr>
    <tr>
      <th>654</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1988</td>
      <td>772</td>
      <td>748</td>
      <td>85</td>
      <td>0.333</td>
      <td>0.395</td>
      <td>0.263</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>161</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>24</td>
    </tr>
    <tr>
      <th>550</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1992</td>
      <td>733</td>
      <td>746</td>
      <td>76</td>
      <td>0.328</td>
      <td>0.406</td>
      <td>0.261</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>162</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>13</td>
    </tr>
    <tr>
      <th>1166</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1965</td>
      <td>611</td>
      <td>604</td>
      <td>77</td>
      <td>0.299</td>
      <td>0.364</td>
      <td>0.235</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>162</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>7</td>
    </tr>
    <tr>
      <th>810</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1982</td>
      <td>709</td>
      <td>716</td>
      <td>79</td>
      <td>0.328</td>
      <td>0.398</td>
      <td>0.256</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>162</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>7</td>
    </tr>
    <tr>
      <th>1036</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1971</td>
      <td>648</td>
      <td>641</td>
      <td>81</td>
      <td>0.328</td>
      <td>0.360</td>
      <td>0.254</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>162</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>7</td>
    </tr>
    <tr>
      <th>1105</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1968</td>
      <td>536</td>
      <td>531</td>
      <td>83</td>
      <td>0.292</td>
      <td>0.318</td>
      <td>0.214</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>164</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>5</td>
    </tr>
    <tr>
      <th>1146</th>
      <td>NYY</td>
      <td>AL</td>
      <td>1966</td>
      <td>611</td>
      <td>612</td>
      <td>70</td>
      <td>0.299</td>
      <td>0.374</td>
      <td>0.235</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>160</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
</div>

<h3 id="pdapply">pd.apply</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># column sum
</span><span class="n">baseball_df</span><span class="p">[[</span><span class="s">'RS'</span><span class="p">,</span> <span class="s">'RA'</span><span class="p">]].</span><span class="nb">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RS    880981
RA    880981
dtype: int64
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># row sum
</span><span class="n">baseball_df</span><span class="p">[[</span><span class="s">'RS'</span><span class="p">,</span> <span class="s">'RA'</span><span class="p">]].</span><span class="nb">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0       1422
1       1300
2       1417
3       1540
4       1372
        ... 
1227    1464
1228    1332
1229    1568
1230    1438
1231    1315
Length: 1232, dtype: int64
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">text_playoffs</span><span class="p">(</span><span class="n">num_playoffs</span><span class="p">):</span> 
    <span class="k">if</span> <span class="n">num_playoffs</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">'Yes'</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">'No'</span> 

<span class="n">baseball_df</span><span class="p">[</span><span class="s">'Playoffs'</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="n">text_playoffs</span><span class="p">)</span>

<span class="c1"># ÏúÑÏôÄ Í∞ôÏùå
# baseball_df.apply(lambda row: text_playoffs(row['Playoffs']), axis=1)
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0        No
1       Yes
2       Yes
3        No
4        No
       ... 
1227     No
1228     No
1229    Yes
1230     No
1231     No
Name: Playoffs, Length: 1232, dtype: object
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">calc_win_perc</span><span class="p">(</span><span class="n">wins</span><span class="p">,</span> <span class="n">games_played</span><span class="p">):</span>
    <span class="n">win_perc</span> <span class="o">=</span> <span class="n">wins</span> <span class="o">/</span> <span class="n">games_played</span>
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="nb">round</span><span class="p">(</span><span class="n">win_perc</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>

<span class="n">win_percs</span> <span class="o">=</span> <span class="n">yankees_df</span><span class="p">.</span><span class="nb">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">row</span><span class="p">:</span> <span class="n">calc_win_perc</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s">'W'</span><span class="p">],</span> <span class="n">row</span><span class="p">[</span><span class="s">'G'</span><span class="p">]),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="n">yankees_df</span><span class="p">[</span><span class="s">'WP'</span><span class="p">]</span> <span class="o">=</span> <span class="n">win_percs</span>

<span class="k">print</span><span class="p">(</span><span class="n">yankees_df</span><span class="p">[</span><span class="n">yankees_df</span><span class="p">[</span><span class="s">'WP'</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mf">0.50</span><span class="p">].</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    Team League  Year   RS   RA    W    OBP    SLG     BA  Playoffs  \
18   NYY     AL  2012  804  668   95  0.337  0.453  0.265         1   
48   NYY     AL  2011  867  657   97  0.343  0.444  0.263         1   
78   NYY     AL  2010  859  693   95  0.350  0.436  0.267         1   
108  NYY     AL  2009  915  753  103  0.362  0.478  0.283         1   
138  NYY     AL  2008  789  727   89  0.342  0.427  0.271         0   

     RankSeason  RankPlayoffs    G   OOBP   OSLG   RD    WP  
18          3.0           3.0  162  0.311  0.419  136  0.59  
48          2.0           4.0  162  0.322  0.399  210  0.60  
78          3.0           3.0  162  0.322  0.399  166  0.59  
108         1.0           1.0  162  0.327  0.408  162  0.64  
138         NaN           NaN  162  0.329  0.405   62  0.55  


/var/folders/6k/3q6ftyyn3v1gswgzvq0rxsf80000gn/T/ipykernel_26327/1146162480.py:7: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  yankees_df['WP'] = win_percs
</code></pre></div></div>

<ul>
  <li>Pandas seriesÏóê .valuesÎ•º ÏÇ¨Ïö©Ìï¥ numpy arrayÎ°ú Î∞îÍæº ÌõÑ Ïó∞ÏÇ∞ÌïòÎ©¥ Îπ†Î•¥Í≤å Ïó∞ÏÇ∞ Í∞ÄÎä•</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">win_percs_np</span> <span class="o">=</span> <span class="n">calc_win_perc</span><span class="p">(</span><span class="n">baseball_df</span><span class="p">[</span><span class="s">'W'</span><span class="p">].</span><span class="n">values</span><span class="p">,</span> <span class="n">baseball_df</span><span class="p">[</span><span class="s">'G'</span><span class="p">].</span><span class="n">values</span><span class="p">)</span>

<span class="n">baseball_df</span><span class="p">[</span><span class="s">'WP'</span><span class="p">]</span> <span class="o">=</span> <span class="n">win_percs_np</span>
<span class="n">baseball_df</span><span class="p">[</span><span class="s">'WP'</span><span class="p">].</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0    0.50
1    0.58
2    0.57
3    0.43
4    0.38
Name: WP, dtype: float64
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">win_perc_preds_loop</span> <span class="o">=</span> <span class="p">[]</span>

<span class="c1"># Use a loop and .itertuples() to collect each row's predicted win percentage
</span><span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">baseball_df</span><span class="p">.</span><span class="n">itertuples</span><span class="p">():</span>
    <span class="n">runs_scored</span> <span class="o">=</span> <span class="n">row</span><span class="p">.</span><span class="n">RS</span>
    <span class="n">runs_allowed</span> <span class="o">=</span> <span class="n">row</span><span class="p">.</span><span class="n">RA</span>
    <span class="n">win_perc_pred</span> <span class="o">=</span> <span class="n">predict_win_perc</span><span class="p">(</span><span class="n">runs_scored</span><span class="p">,</span> <span class="n">runs_allowed</span><span class="p">)</span>
    <span class="n">win_perc_preds_loop</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">win_perc_pred</span><span class="p">)</span>

<span class="c1"># Apply predict_win_perc to each row of the DataFrame
</span><span class="n">win_perc_preds_apply</span> <span class="o">=</span> <span class="n">baseball_df</span><span class="p">.</span><span class="nb">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">row</span><span class="p">:</span> <span class="n">predict_win_perc</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s">'RS'</span><span class="p">],</span> <span class="n">row</span><span class="p">[</span><span class="s">'RA'</span><span class="p">]),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="c1"># Calculate the win percentage predictions using NumPy arrays
</span><span class="n">win_perc_preds_np</span> <span class="o">=</span> <span class="n">predict_win_perc</span><span class="p">(</span><span class="n">baseball_df</span><span class="p">[</span><span class="s">'RS'</span><span class="p">].</span><span class="n">values</span><span class="p">,</span> <span class="n">baseball_df</span><span class="p">[</span><span class="s">'RA'</span><span class="p">].</span><span class="n">values</span><span class="p">)</span>
<span class="n">baseball_df</span><span class="p">[</span><span class="s">'WP_preds'</span><span class="p">]</span> <span class="o">=</span> <span class="n">win_perc_preds_np</span>
<span class="k">print</span><span class="p">(</span><span class="n">baseball_df</span><span class="p">.</span><span class="n">head</span><span class="p">())</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---------------------------------------------------------------------------

NameError                                 Traceback (most recent call last)

/var/folders/6k/3q6ftyyn3v1gswgzvq0rxsf80000gn/T/ipykernel_26327/317242197.py in &lt;module&gt;
      5     runs_scored = row.RS
      6     runs_allowed = row.RA
----&gt; 7     win_perc_pred = predict_win_perc(runs_scored, runs_allowed)
      8     win_perc_preds_loop.append(win_perc_pred)
      9 


NameError: name 'predict_win_perc' is not defined
</code></pre></div></div>

:ET