I"}"<hr />
<p><b>DJANGO WEB DEVELOPMENT</b></p>
<h3 id="2-django-구조-이해하기">2. DJANGO 구조 이해하기</h3>

<hr />

<h3 id="django-프로젝트-생성">django 프로젝트 생성</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 가상환경 안에 들어간 후 (django-admin startproject [project_name])
</span><span class="n">django</span><span class="o">-</span><span class="n">admin</span> <span class="n">startproject</span> <span class="n">costaurant</span>

<span class="c1"># 생성된 나의 프로젝트 폴더에 들어가기
</span><span class="n">cd</span> <span class="n">costaurant</span>

<span class="c1"># 해당 폴더에서 vscode 실행
</span><span class="n">code</span> <span class="p">.</span>

<span class="c1"># 서버 실행
</span><span class="n">python</span> <span class="n">manage</span><span class="p">.</span><span class="n">py</span> <span class="n">runserver</span>
</code></pre></div></div>

<hr />

<h3 id="django-프로젝트-구조">django 프로젝트 구조</h3>
<ul>
  <li>project root - 프로젝트 최상위의 디렉토리 (ex)~/first_django/costaurant)</li>
  <li>manage.py - 프로젝트 관리를 위한 명령 유틸리티
    <ul>
      <li>django 앱을 만들기, 데이터베이스 관련 기능을 수행, 개발 서버를 실행 등</li>
    </ul>
  </li>
  <li>project app(django root) - project root 안에 있는 프로젝트명의 directory (ex)~/first_django/costaurant/costaurant)</li>
  <li>__ init __.py - python 패키지로 인식하게끔 하는 파일(하위호환)</li>
  <li>settings.py - django 프로젝트의 여러 가지 설정을 담고 있는 파일</li>
  <li>urls.py - django 프로젝트로 들어온 url을 보고 알맞은 로직(View)으로 연결해주는 역할을 하는 파일, 일종의 목차</li>
  <li>wsgi.py - WebServer Gateway Interface의 약자로 파이썬에서 웹 통신을 하기 위한 일종의 약속</li>
</ul>

<hr />

<h3 id="django-app">django app</h3>
<ul>
  <li>django project - 웹서비스 전체</li>
  <li>django app - 기능을 나타내는 단위</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 앱 설치 - project app directory에 가서 (python manage.py startapp {app_name}
</span><span class="n">python</span> <span class="n">manage</span><span class="p">.</span><span class="n">py</span> <span class="n">startapp</span> <span class="n">foods</span>

<span class="c1"># settings.py에 app_name 추가
</span><span class="n">Installed_APPS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">'django.contrib.admin'</span><span class="p">,</span>
    <span class="s">'django.contrib.auth'</span><span class="p">,</span>
    <span class="s">'django.contrib.contenttypes'</span><span class="p">,</span>
    <span class="s">'django.contrib.sessions'</span><span class="p">,</span>
    <span class="s">'django.contrib.messages'</span><span class="p">,</span>
    <span class="s">'django.contrib.staticfiles'</span><span class="p">,</span>
    <span class="s">'foods'</span>
<span class="p">]</span>
</code></pre></div></div>
<ul>
  <li>admin.py - django 관리자와 연동하기 위해 필요한 설정 파일</li>
  <li>apps.py - 해당 앱에 대한 설정 넣는 파일</li>
  <li>tests.py - 프로젝트의 테스트 코드를 작성하는 파일</li>
  <li><strong>models.py</strong> - 해당 앱에서 사용할 데이터 모델을 정의(즉, 데이터베이스 연동과 연관된 파일)</li>
  <li><strong>views.py</strong> - 서버에 요청이 들어왔을 때, 어떻게 처리하는지 메인 로직이 들어가는 파일</li>
  <li>migrations - 데이터베이스의 변경 사항에 대한 history 누적</li>
</ul>

<hr />

<h3 id="url-만들기">url 만들기</h3>
<ul>
  <li>domain/foods/index 링크 만들기</li>
  <li>URL 작성시 참고사항(현재 naver.com/cloth 에 있다고 했을 때)
    <ul>
      <li>앞에 슬래시<code class="language-plaintext highlighter-rouge">/</code>가 있을 경우 도멘으로부터의 경로
        <ul>
          <li>&lt;a href=”/watch/”&gt;이동하기&lt;/a&gt; ➡️ naver.com/watch</li>
        </ul>
      </li>
      <li>앞에 슬래시(/)가 없는 경우 현재 URL부터의 경로
        <ul>
          <li>&lt;a href=”pants/”&gt;이동하기&lt;/a&gt; ➡️ naver.com/cloth/pants</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 'costaurant/' directory의 settings.py 파일
</span><span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
<span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span><span class="p">,</span><span class="n">include</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'admin/'</span><span class="p">,</span> <span class="n">admin</span><span class="p">.</span><span class="n">site</span><span class="p">.</span><span class="n">urls</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'foods/'</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">'foods.urls'</span><span class="p">))</span>
<span class="p">]</span>

<span class="c1"># 'foods/' directory에 urls.py 만들기
# foods/urls.py
</span><span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'index/'</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">index</span><span class="p">)</span>
<span class="p">]</span>

<span class="c1"># 'foods/' directory의 views.py
</span><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span>
<span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponse</span>

<span class="c1"># Create your views here.
</span><span class="k">def</span> <span class="nf">index</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">'&lt;h2&gt;Hello, Django!&lt;/h2&gt;'</span><span class="p">)</span>

<span class="c1"># 사이트 확인
# http://localhost:8000/foods/index/
</span></code></pre></div></div>

<hr />

<h3 id="render">render</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># foods directory 안에 template directory, 그리고 그 안에 또 foods 라는 directory 생성
# foods/template/foods directory에 index.html 파일 생성 후 html 코드를 기입
</span>
<span class="c1"># 'foods/' directory의 views.py 파일
</span><span class="k">def</span> <span class="nf">index</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'foods/index.html'</span><span class="p">)</span>

<span class="c1"># 사이트 확인
# http://127.0.0.1:8000/foods/index/
</span></code></pre></div></div>

<ul>
  <li>render 함수는 인자로 주어진 템플릿을 사전형(dict) 인자인 context와 결합해서 렌더링을 거친 다음 HttpResponse 객체로 반환하는 함수</li>
  <li>render(request, template_name, context=None, context_type=None, status=None, using=None)</li>
  <li>request에는 데이터를 요청한 요청 객체를 넘겨줌, 앞에서 함수형 index의 인자로 들어온 request를 render에 그대로 사용
    <ul>
      <li>context - 템플릿에 추가할 값들이 들어 있는 사전형 인자로 기본값은 아무것도 없는 None</li>
      <li>content_type - 결과로 만들어 내는 문서의 유형을 말하며 기본값은 ‘text/html’</li>
      <li>status - 상태 코드(Status Code) 값이며 기본값은 200</li>
      <li>using - 템플릿을 렌더하는 템플릿 엔진을 지정할 수 있는 인자</li>
    </ul>
  </li>
</ul>

<hr />
:ET