<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-01-04T22:48:56+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Bibliothek für Data-Engineering</title><subtitle>Eine Bibliothek</subtitle><author><name>ZSU</name></author><entry><title type="html">[Docker] Docker Prune</title><link href="http://localhost:4000/docker/docker9/" rel="alternate" type="text/html" title="[Docker] Docker Prune" /><published>2022-01-04T00:00:00+09:00</published><updated>2022-01-04T00:00:00+09:00</updated><id>http://localhost:4000/docker/docker9</id><content type="html" xml:base="http://localhost:4000/docker/docker9/">&lt;hr /&gt;
&lt;h3 id=&quot;docker-cleaning-up&quot;&gt;Docker Cleaning Up&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;prune command to clean up images, volumes, build cache, and containers&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;docker-clean-up&quot;&gt;Docker clean up&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# displays information regarding the amount of disk space used by the docker daemon&lt;/span&gt;
docker system &lt;span class=&quot;nb&quot;&gt;df&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Remove all unused containers, networks, images (both dangling and unreferenced), and optionally, volumes&lt;/span&gt;
docker system prune

docker image prune
docker container prune
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;ref&quot;&gt;ref&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/system_prune/&quot;&gt;🔗 공식 문서&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.lainyzine.com/ko/article/docker-prune-usage-remove-unused-docker-objects/&quot;&gt;🔗 참고 블로그&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>ZSU</name></author><category term="DOCKER" /><category term="DOCKER" /><summary type="html">Docker Cleaning Up prune command to clean up images, volumes, build cache, and containers</summary></entry><entry><title type="html">[Docker] Docker Persistent Data</title><link href="http://localhost:4000/docker/docker10/" rel="alternate" type="text/html" title="[Docker] Docker Persistent Data" /><published>2022-01-04T00:00:00+09:00</published><updated>2022-01-04T00:00:00+09:00</updated><id>http://localhost:4000/docker/docker10</id><content type="html" xml:base="http://localhost:4000/docker/docker10/">&lt;hr /&gt;
&lt;h3 id=&quot;docker-persistent-data&quot;&gt;Docker Persistent Data&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;containers are usually immutable(unchangeable) &amp;amp; ephemeral(temporary)&lt;/li&gt;
  &lt;li&gt;which means that containers should never change when containers are re-deployed&lt;/li&gt;
  &lt;li&gt;then the problem arises for unique data like databases&lt;/li&gt;
  &lt;li&gt;these unique data are called persistent data&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Data Volumes&lt;/strong&gt; &amp;amp; &lt;strong&gt;Bind Mounts&lt;/strong&gt; is used to solve the problem&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Data Volumes&lt;/strong&gt; - configuration option that creates a special locations outside the container’s union file system to store unique data&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Bind Mounts&lt;/strong&gt; - sharing or mounting a host directory or file into a container&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;data-volumes&quot;&gt;Data Volumes&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# pull mysql image &lt;/span&gt;
docker image pull mysql:latest

&lt;span class=&quot;c&quot;&gt;# run container&lt;/span&gt;
docker container run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; mysql_test &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;MYSQL_ALLOW_EMPTY_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true &lt;/span&gt;mysql:latest

&lt;span class=&quot;c&quot;&gt;# mysql_test container의 설정 부분, 설정 중 volume을 확인&lt;/span&gt;
docker container inspect mysql_test
&lt;span class=&quot;c&quot;&gt;# destination - container가 데이터를 적재한다고 생각하는 곳&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# source - 실제 데이터가 적대되어 있는 곳&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# docker container를 통해 만든 모든 데이터를 확인할 수 있음, 이 volume은 container가 삭제되어도 남아 있음&lt;/span&gt;
docker volume &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 하지만 volume이 어떤 volume인지 분간하기가 어렵기에 container을 run할 때 volume에 name을 주는 것이 좋음&lt;/span&gt;
docker container run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; mysql_test1 &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;MYSQL_ALLOW_EMPTY_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; mysql-db:/var/lib/mysql mysql:latest

&lt;span class=&quot;c&quot;&gt;# mysql_test2도 mysql_test1과 같은 db를 사용&lt;/span&gt;
docker container run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; mysql_test2 &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;MYSQL_ALLOW_EMPTY_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; mysql-db:/var/lib/mysql mysql:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;database-upgrade-practice-using-named-volumes&quot;&gt;Database Upgrade Practice Using Named Volumes&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Upgrading Database with Named Volumes&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# create a postgres container with named volume psql-data using version 9.6.1&lt;/span&gt;
docker container run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; postgres_test1 &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; psql-data:/var/lib/postgresql/data postgres:9.6.1

&lt;span class=&quot;c&quot;&gt;# check log &amp;amp; stop container&lt;/span&gt;
docker container logs postgres_test1
docker container stop postgres_test1

&lt;span class=&quot;c&quot;&gt;# create a new postgres container with same named volume psql-data using version 9.6.2&lt;/span&gt;
docker container run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; postgres_test2 &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; psql-data:/var/lib/postgresql/data postgres:9.6.2

&lt;span class=&quot;c&quot;&gt;# check log &amp;amp; stop container&lt;/span&gt;
docker container logs postgres_test2
docker container stop postgres_test2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;bind-mounts&quot;&gt;Bind Mounts&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# (terminal1) pwd에 index.html 존재 ($(pwd)는 현재 pwd, 즉 현재 wd와 colon 뒤 container의 wd를 일치시킬 것임)&lt;/span&gt;
docker container run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; nginx &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 80:80 &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;:/usr/share/nginx/html nginx

&lt;span class=&quot;c&quot;&gt;# (terminal2) open a new terminal (command+shift+d)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# (terminal2) get a shell inside nginx container&lt;/span&gt;
docker container &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; nginx bash

&lt;span class=&quot;c&quot;&gt;# (terminal2) cd&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;usr/share/nginx/html
&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-al&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# - you can see Dockerfile &amp;amp; index.html&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# (terminal1) make a new file in the original wd&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;test.txt

&lt;span class=&quot;c&quot;&gt;# (terminal2)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-al&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# - you can see the test.txt file!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;</content><author><name>ZSU</name></author><category term="DOCKER" /><category term="DOCKER" /><summary type="html">Docker Persistent Data containers are usually immutable(unchangeable) &amp;amp; ephemeral(temporary) which means that containers should never change when containers are re-deployed then the problem arises for unique data like databases these unique data are called persistent data Data Volumes &amp;amp; Bind Mounts is used to solve the problem Data Volumes - configuration option that creates a special locations outside the container’s union file system to store unique data Bind Mounts - sharing or mounting a host directory or file into a container</summary></entry><entry><title type="html">[Docker] Docker Compose</title><link href="http://localhost:4000/docker/docker11/" rel="alternate" type="text/html" title="[Docker] Docker Compose" /><published>2022-01-04T00:00:00+09:00</published><updated>2022-01-04T00:00:00+09:00</updated><id>http://localhost:4000/docker/docker11</id><content type="html" xml:base="http://localhost:4000/docker/docker11/">&lt;hr /&gt;
&lt;h3 id=&quot;docker-compose&quot;&gt;Docker Compose&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Basic Docker compose commands&lt;/li&gt;
  &lt;li&gt;Build a Compose File For a Multi-Container Service&lt;/li&gt;
  &lt;li&gt;Compose for Run-Time Building and Multi-Container Development&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;basic-docker-compose-commands&quot;&gt;Basic Docker compose commands&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# pwd에 docker-compose.yml 존재, docker-compose 시작 (docker compose up)&lt;/span&gt;
docker-compose up

&lt;span class=&quot;c&quot;&gt;# docker compose 종료 (docker-compose down)&lt;/span&gt;
docker-compose down
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;build-a-compose-file-for-a-multi-container-service&quot;&gt;Build a Compose File FOr a Multi-Container Service&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;build a drupal content management system&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# use Drupal image along with postgres image&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# use ports to expose Drupal on 8060 for localhost:8060&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# set POSTGRES_PASSWORD for postgres&lt;/span&gt;
version: &lt;span class=&quot;s1&quot;&gt;'2'&lt;/span&gt;

services:
  drupal:
    image: drupal
    ports:
      - 8050:80
    volumes:
      - /var/www/html/modules
      - /var/www/html/profiles
      - /var/www/html/themes
      - /var/www/html/sites

  postgres:
    image: postgres
    environment: 
       - &lt;span class=&quot;nv&quot;&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1234
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Drupal DB&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# walk through Drupal via browser&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Drupal assumes DB is localhost so it has to be changed to 'postgres'&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# volume까지 삭제&lt;/span&gt;
docker-compose down &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;compose-for-run-time-building-and-multi-container-development&quot;&gt;Compose for Run-Time Building and Multi-Container Development&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Build custom drupal image for local testing&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# assignment instruction&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## Dockerfile&lt;/span&gt;
- First you need to build a custom Dockerfile &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;this directory, &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;FROM drupal:8.8.2&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; NOTE: &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;it fails to build, try the latest 8 branch version with &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;FROM drupal:8&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
- Then RUN apt package manager &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;to &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;git: &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; git&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
- Remember to cleanup after your apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;with &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /var/lib/apt/lists/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; and use &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\`&lt;/span&gt; and &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; properly. You can find examples of them &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;drupal official image. More on this below under Compose file.
- Then change &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;WORKDIR /var/www/html/themes&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
- Then use git to clone the theme with: &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;RUN git clone &lt;span class=&quot;nt&quot;&gt;--branch&lt;/span&gt; 8.x-3.x &lt;span class=&quot;nt&quot;&gt;--single-branch&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--depth&lt;/span&gt; 1 https://git.drupalcode.org/project/bootstrap.git&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
- Combine that line with this line, as we need to change permissions on files and don&lt;span class=&quot;s1&quot;&gt;'t want to use another image layer to do that (it creates size bloat). This drupal container runs as www-data user but the build actually runs as root, so often we have to do things like `chown` to change file owners to the proper user: `chown -R www-data:www-data bootstrap`. Remember the first line needs a `\` at end to signify the next line is included in the command, and at start of next line you should have `&amp;amp;&amp;amp;` to signify &quot;if first command succeeds then also run this command&quot;
- Then, just to be safe, change the working directory back to its default (from drupal image) at `/var/www/html`

## Compose File
- We'&lt;/span&gt;re going to build a custom image &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;this compose file &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;drupal service. Use Compose file from previous assignment &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Drupal to start with, and we&lt;span class=&quot;s1&quot;&gt;'ll add to it, as well as change image name.
- Rename image to `custom-drupal` as we want to make a new image based on the official `drupal:8.8.2`.
- We want to build the default Dockerfile in this directory by adding `build: .` to the `drupal` service. When we add a build + image value to a compose service, it knows to use the image name to write to in our image cache, rather then pull from Docker Hub.
- For the `postgres:12.1` service, you need the same password as in previous assignment, but also add a volume for `drupal-data:/var/lib/postgresql/data` so the database will persist across Compose restarts.

## Start Containers, Configure Drupal
- Start containers like before, configure Drupal web install like before.
- After website comes up, click on `Appearance` in top bar, and notice a new theme called `Bootstrap` is there. That'&lt;/span&gt;s the one we added with our custom Dockerfile.
- Click &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;Install and &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;as default&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; Then click &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;Back to site&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;top left&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; and the website interface should look different. You&lt;span class=&quot;s1&quot;&gt;'ve successfully installed and activated a new theme in your own custom image without installing anything on your host other than Docker!
- If you exit (ctrl-c) and then `docker-compose down` it will delete containers, but not the volumes, so on next `docker-compose up` everything will be as it was.
- To totally clean up volumes, add `-v` to `down` command.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Dockerfile&lt;/span&gt;
FROM drupal:8.8.2

RUN apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; git &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /var/lib/apt/lists/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;

WORKDIR /var/www/html/themes

RUN git clone &lt;span class=&quot;nt&quot;&gt;--branch&lt;/span&gt; 8.x-3.x &lt;span class=&quot;nt&quot;&gt;--single-branch&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--depth&lt;/span&gt; 1 https://git.drupalcode.org/project/bootstrap.git &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chown&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; www-data:www-data bootstrap

WORKDIR /var/www/html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# docker-compose.yml&lt;/span&gt;
version: &lt;span class=&quot;s1&quot;&gt;'2'&lt;/span&gt;

services:
  drupal:
    image: custom-drupal
    build: &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
    ports:
      - 8050:80
    volumes:
      - /var/www/html/modules
      - /var/www/html/profiles
      - /var/www/html/themes
      - /var/www/html/sites


  postgres:
    image: postgres:12.1
    environment: 
      - &lt;span class=&quot;nv&quot;&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1234
    volumes:
      - drupal-data:/var/lib/postgresql/data

volumes:
  drupal-data:
  drupal-modules:
  drupal-profiles:
  drupal-themes:
  drupal-sites:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>ZSU</name></author><category term="DOCKER" /><category term="DOCKER" /><summary type="html">Docker Compose Basic Docker compose commands Build a Compose File For a Multi-Container Service Compose for Run-Time Building and Multi-Container Development</summary></entry><entry><title type="html">[Docker] Docker Image2 - Building Images</title><link href="http://localhost:4000/docker/docker8/" rel="alternate" type="text/html" title="[Docker] Docker Image2 - Building Images" /><published>2022-01-03T00:00:00+09:00</published><updated>2022-01-03T00:00:00+09:00</updated><id>http://localhost:4000/docker/docker8</id><content type="html" xml:base="http://localhost:4000/docker/docker8/">&lt;hr /&gt;
&lt;h3 id=&quot;docker-image2---building-images&quot;&gt;Docker Image2 - Building Images&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Dockerfile Build&lt;/li&gt;
  &lt;li&gt;Dockerfile Build Example&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;dockerfile-build&quot;&gt;Dockerfile Build&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Dockerfile이 있는 repository에서 진행 (docker image build -t [image_name] .)&lt;/span&gt;
docker image build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; custom_nginx &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# dockerfile에 적혀 있는 순서대로 build하며, 변경이 없는 부분은 cache를 이용하고 변경된 부분만 새롭게 build하므로&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 변경이 없는 부분을 위에, 변경이 많은 부분은 아래에 적는 것이 좋음&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;dockerfile-build-example&quot;&gt;Dockerfile Build Example&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Dockerfile&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# - you should use the 'node' official image, with the alpine 6.x branch (node:6-alpine)&lt;/span&gt;
FROM node:6-alpine
&lt;span class=&quot;c&quot;&gt;# - this app listens on port 3000, but the container should launch on port 80&lt;/span&gt;
EXPOSE 3000
&lt;span class=&quot;c&quot;&gt;# - then it should use alpine package manager to install tini: 'apk add --update tini'&lt;/span&gt;
RUN apk add &lt;span class=&quot;nt&quot;&gt;--update&lt;/span&gt; tini
&lt;span class=&quot;c&quot;&gt;# - then it should create directory /usr/src/app for app files with 'mkdir -p /usr/src/app'&lt;/span&gt;
RUN &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /usr/src/app
&lt;span class=&quot;c&quot;&gt;# - Node uses a &quot;package manager&quot;, so it needs to copy in package.json file&lt;/span&gt;
WORKDIR /usr/src/app
COPY package.json package.json 
&lt;span class=&quot;c&quot;&gt;# - then it needs to run 'npm install' to install dependencies from that file&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# - to keep it clean and small, run 'npm cache clean --force' after above&lt;/span&gt;
RUN npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm cache clean &lt;span class=&quot;nt&quot;&gt;--force&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# - then it needs to copy in all files from current directory&lt;/span&gt;
COPY &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# - then it needs to start container with command '/sbin/tini -- node ./bin/www'&lt;/span&gt;
CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tini&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;--&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;node&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;./bin/www&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;local에서 확인&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# build&lt;/span&gt;
docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; testnode &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# run container&lt;/span&gt;
docker container run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 80:3000 testnode

&lt;span class=&quot;c&quot;&gt;# check&lt;/span&gt;
localhost:80

&lt;span class=&quot;c&quot;&gt;# docker hub에 올리고 download&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;docker hub에 올린 뒤, pull해서 확인&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# docker image tagging&lt;/span&gt;
docker tag testnode:latest carl020958/testing_node:latest

&lt;span class=&quot;c&quot;&gt;# pushing to docker hub&lt;/span&gt;
docker push carl020958/testing_node:latest

&lt;span class=&quot;c&quot;&gt;# remove docker image&lt;/span&gt;
docker image &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; 3b6

&lt;span class=&quot;c&quot;&gt;# run container&lt;/span&gt;
docker container run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 80:3000 carl020958/testing_node

&lt;span class=&quot;c&quot;&gt;# check&lt;/span&gt;
localhost:80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;</content><author><name>ZSU</name></author><category term="DOCKER" /><category term="DOCKER" /><summary type="html">Docker Image2 - Building Images Dockerfile Build Dockerfile Build Example</summary></entry><entry><title type="html">[Docker] Docker Network2</title><link href="http://localhost:4000/docker/docker6/" rel="alternate" type="text/html" title="[Docker] Docker Network2" /><published>2022-01-03T00:00:00+09:00</published><updated>2022-01-03T00:00:00+09:00</updated><id>http://localhost:4000/docker/docker6</id><content type="html" xml:base="http://localhost:4000/docker/docker6/">&lt;hr /&gt;
&lt;h3 id=&quot;docker-network2&quot;&gt;Docker Network2&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Docker CLI Testing&lt;/li&gt;
  &lt;li&gt;Docker DNS Round Robin Test&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;docker-cli-testing&quot;&gt;Docker CLI Testing&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# centos7&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# --rm option을 통해 해당 container 종료 시 자동 삭제&lt;/span&gt;
docker container run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; centos:7 bash

&lt;span class=&quot;c&quot;&gt;# root&lt;/span&gt;
yum update curl

curl &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# ubuntu14.04&lt;/span&gt;
docker container run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; ubuntu:14.04 bash

&lt;span class=&quot;c&quot;&gt;# root&lt;/span&gt;
apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; curl

curl--version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;docker-dns-round-robin-test&quot;&gt;Docker DNS Round Robin Test&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# create network &lt;/span&gt;
docker network create dns_test

&lt;span class=&quot;c&quot;&gt;# create 2 elasticsearch:2 container in dns_test network&lt;/span&gt;
docker container run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--net&lt;/span&gt; dns_test &lt;span class=&quot;nt&quot;&gt;--net-alias&lt;/span&gt; search elasticsearch:2
docker container run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--net&lt;/span&gt; dns_test &lt;span class=&quot;nt&quot;&gt;--net-alias&lt;/span&gt; search elasticsearch:2

&lt;span class=&quot;c&quot;&gt;# use the code below to test DNS Round Robin 1&lt;/span&gt;
docker container run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--net&lt;/span&gt; dns_test alpine:3.10 nslookup search

&lt;span class=&quot;c&quot;&gt;# use the code below to test DNS Round Robin 2&lt;/span&gt;
docker container run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--net&lt;/span&gt; dns_test centos curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; search:9200
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;</content><author><name>ZSU</name></author><category term="DOCKER" /><category term="DOCKER" /><summary type="html">Docker Network2 Docker CLI Testing Docker DNS Round Robin Test</summary></entry><entry><title type="html">[Docker] Docker Image1</title><link href="http://localhost:4000/docker/docker7/" rel="alternate" type="text/html" title="[Docker] Docker Image1" /><published>2022-01-03T00:00:00+09:00</published><updated>2022-01-03T00:00:00+09:00</updated><id>http://localhost:4000/docker/docker7</id><content type="html" xml:base="http://localhost:4000/docker/docker7/">&lt;hr /&gt;
&lt;h3 id=&quot;docker-image1&quot;&gt;Docker Image1&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Docker Image &amp;amp; Layers&lt;/li&gt;
  &lt;li&gt;Docker Image Tagging &amp;amp; Pushing to Docker Hub&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;docker-image--layers&quot;&gt;Docker Image &amp;amp; Layers&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# show history of image layers (docker image history [image_name])&lt;/span&gt;
docker image &lt;span class=&quot;nb&quot;&gt;history &lt;/span&gt;nginx:latest

&lt;span class=&quot;c&quot;&gt;# returns JSON metadata about the image (docker image inspect [image_name])&lt;/span&gt;
docker image inspect nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;docker-image-tagging--pushing-to-docker-hub&quot;&gt;Docker Image Tagging &amp;amp; Pushing to Docker Hub&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# assigns one or more tags to an image (docker image tag [source_image[:tag]] [target_image[:tag]]&lt;/span&gt;
docker image tag nginx zsu/nginx

&lt;span class=&quot;c&quot;&gt;# login to docker hub&lt;/span&gt;
docker login

&lt;span class=&quot;c&quot;&gt;# can check docker profile&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; .docker/config.json

&lt;span class=&quot;c&quot;&gt;# push to dockerhub (docker image push [user]/[image_name]:[tag])&lt;/span&gt;
docker image push zsu/nginx:testing

&lt;span class=&quot;c&quot;&gt;# login to docker hub stores authentication key, so don't forget to logout to protect your account&lt;/span&gt;
docker &lt;span class=&quot;nb&quot;&gt;logout&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;</content><author><name>ZSU</name></author><category term="DOCKER" /><category term="DOCKER" /><summary type="html">Docker Image1 Docker Image &amp;amp; Layers Docker Image Tagging &amp;amp; Pushing to Docker Hub</summary></entry><entry><title type="html">[Docker] Docker Network1</title><link href="http://localhost:4000/docker/docker5/" rel="alternate" type="text/html" title="[Docker] Docker Network1" /><published>2022-01-02T00:00:00+09:00</published><updated>2022-01-02T00:00:00+09:00</updated><id>http://localhost:4000/docker/docker5</id><content type="html" xml:base="http://localhost:4000/docker/docker5/">&lt;hr /&gt;
&lt;h3 id=&quot;docker-network1&quot;&gt;Docker Network1&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Priate &amp;amp; Pulbic Comms in Containers&lt;/li&gt;
  &lt;li&gt;CLI Management of Virtual Networks&lt;/li&gt;
  &lt;li&gt;Docker DNS(Domain Name System) &amp;amp; How Containers Find Each Other&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;priate--pulbic-comms-in-containers&quot;&gt;Priate &amp;amp; Pulbic Comms in Containers&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
docker container run &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 80:80 &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; webhost &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; nginx

&lt;span class=&quot;c&quot;&gt;# 어떤 host port에서 container port으로 forward되는지 확인 (docker container port [container_name(id)])&lt;/span&gt;
docker container port webhost

&lt;span class=&quot;c&quot;&gt;# get container IP (docker container inspect --format '{{ NetWorkSettings.IPAddress }}' [container_name(id)])&lt;/span&gt;
docker container inspect &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{{ .NetworkSettings.IPAddress }}'&lt;/span&gt; webhost

&lt;span class=&quot;c&quot;&gt;# check my ip&lt;/span&gt;
ipconfig getifaddr en0

&lt;span class=&quot;c&quot;&gt;# container IP and my IP is different!&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;cli-management-of-virtual-networks&quot;&gt;CLI Management of Virtual Networks&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# show network list&lt;/span&gt;
docker network &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# inspect a network (docker container inspect [network_name])&lt;/span&gt;
docker network inspect bridge

&lt;span class=&quot;c&quot;&gt;# create a network (docker network create --driver), default driver == bridge&lt;/span&gt;
docker network create my_app_net

&lt;span class=&quot;c&quot;&gt;# my_app_net network에 container 생성 (--network option을 통해 지정)&lt;/span&gt;
docker container run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; new_nginx &lt;span class=&quot;nt&quot;&gt;--network&lt;/span&gt; my_app_net nginx

&lt;span class=&quot;c&quot;&gt;# 확인&lt;/span&gt;
docker network inspect my_app_net

&lt;span class=&quot;c&quot;&gt;# attach a network to container (docker container connect [network_name(id)] [container_name(id)])&lt;/span&gt;
docker network connect a123acbd7d0a webhost

&lt;span class=&quot;c&quot;&gt;# detach a network from container (docker container disconnect [network_name(id)] [container_name(id)])&lt;/span&gt;
docker network disconnect a123acbd7d0a webhost
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;docker-dnsdomain-name-system--how-containers-find-each-other&quot;&gt;Docker DNS(Domain Name System) &amp;amp; How Containers Find Each Other&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 현재 my_app_net이라는 network에 new_nginx이라는 container만 존재&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# create my_nginx container in my_app_net network&lt;/span&gt;
docker container run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; my_nginx &lt;span class=&quot;nt&quot;&gt;--network&lt;/span&gt; my_app_net nginx:alpine

&lt;span class=&quot;c&quot;&gt;# send ping from my_nginx to new_nginx (available cuz they are in the same network my_app_net)&lt;/span&gt;
docker container &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; my_nginx ping new_nginx

&lt;span class=&quot;c&quot;&gt;# recommended to create custom network, docker compose makes this easier&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;</content><author><name>ZSU</name></author><category term="DOCKER" /><category term="DOCKER" /><summary type="html">Docker Network1 Priate &amp;amp; Pulbic Comms in Containers CLI Management of Virtual Networks Docker DNS(Domain Name System) &amp;amp; How Containers Find Each Other</summary></entry><entry><title type="html">[Docker] Docker Shell Inside Containers</title><link href="http://localhost:4000/docker/docker4/" rel="alternate" type="text/html" title="[Docker] Docker Shell Inside Containers" /><published>2022-01-02T00:00:00+09:00</published><updated>2022-01-02T00:00:00+09:00</updated><id>http://localhost:4000/docker/docker4</id><content type="html" xml:base="http://localhost:4000/docker/docker4/">&lt;h3 id=&quot;getting-a-shell-inside-containers&quot;&gt;Getting a Shell Inside Containers&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# start new container interactively (docker container run -it)&lt;/span&gt;
docker container run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; proxy nginx

&lt;span class=&quot;c&quot;&gt;# run additional command in existing container (docker container exec -it)&lt;/span&gt;
docker container &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; proxy bash


&lt;span class=&quot;c&quot;&gt;# ------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Ubuntu&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# exec의 경우에는 additional command, start의 경우에는 해당 container를 시작, 또한 ubuntu는 argument로 bash 줄 필요 없음&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ubuntu container는 이미 설치되어 있음&lt;/span&gt;
docker container start &lt;span class=&quot;nt&quot;&gt;-ai&lt;/span&gt; ubuntu

&lt;span class=&quot;c&quot;&gt;# container 안의 ubuntu는 일반적인 ubuntu와 다르게 minimal함, 따라서 아래처럼 필요한 부분들은 따로 설치가 필요&lt;/span&gt;
apt-get update
apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; curl


&lt;span class=&quot;c&quot;&gt;# -----&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Mysql&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# -----&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# mysql shell에서 ps 실행하고 싶은 경우&lt;/span&gt;
apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; procps
ps


&lt;span class=&quot;c&quot;&gt;# ------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Alpine&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# alpine은 기본적으로 bash가 없기에 sh로 접속&lt;/span&gt;
docker container run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; alpine sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;</content><author><name>ZSU</name></author><category term="DOCKER" /><category term="DOCKER" /><summary type="html">Getting a Shell Inside Containers ```bash start new container interactively (docker container run -it) docker container run -it –name proxy nginx</summary></entry><entry><title type="html">[Apache Airflow] Airflow Installation on Docker</title><link href="http://localhost:4000/airflow/airflow1/" rel="alternate" type="text/html" title="[Apache Airflow] Airflow Installation on Docker" /><published>2021-12-29T00:00:00+09:00</published><updated>2021-12-29T00:00:00+09:00</updated><id>http://localhost:4000/airflow/airflow1</id><content type="html" xml:base="http://localhost:4000/airflow/airflow1/">&lt;hr /&gt;
&lt;h3 id=&quot;airflow-on-docker&quot;&gt;Airflow on Docker&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Docker을 통한 Apache Airflow 설치&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;airflow-docker-설치&quot;&gt;Airflow-Docker 설치&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# make folder and cd&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;airflow-docker
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;airflow-docker

&lt;span class=&quot;c&quot;&gt;# docker-compose.yaml file download(check version)&lt;/span&gt;
curl &lt;span class=&quot;nt&quot;&gt;-LfO&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://airflow.apache.org/docs/apache-airflow/2.1.4/docker-compose.yaml'&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# make folders for dags &amp;amp; plugins &amp;amp; logs&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; ./dags ./plugins ./logs

&lt;span class=&quot;c&quot;&gt;# On Linux &amp;amp; Mac OS, the quick-start needs to know your host user id and needs to have group id set to 0&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;AIRFLOW_UID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;AIRFLOW_GID=0&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; .env

&lt;span class=&quot;c&quot;&gt;# .env 파일 * 파일 안의 다음과 같은 내용 생김&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# AIRFLOW_UID=501&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# AIRFLOW_GID=0&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# run database migrations and create the first user account&lt;/span&gt;
docker-compose up airflow-init

&lt;span class=&quot;c&quot;&gt;# cf. airflow-docker은 requires at least 4GB memory&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 잘 설치된 경우 아래와 같은 msg 나옴 &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# airflow-init_1       | 2.1.4&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# airflow-docker_airflow-init_1 exited with code 0&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# run airflow&lt;/span&gt;
docker-compose up

&lt;span class=&quot;c&quot;&gt;# end airflow&lt;/span&gt;
docker-compose down
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;환경&quot;&gt;환경&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# airflow 명령어 사용하기 위한 venv 구성&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# airflow 설치한 폴더로 cd&lt;/span&gt;
python3 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; venv airflow1
&lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;airflow1/bin/activate

&lt;span class=&quot;c&quot;&gt;# airflow에서 사용할 module 설치&lt;/span&gt;
pip3 &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;wheel

&lt;span class=&quot;c&quot;&gt;# airflow 설치(버전 유의)&lt;/span&gt;
pip3 &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;apache-airflow&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;2.1.4

&lt;span class=&quot;c&quot;&gt;# initialize metadatabase &amp;amp; generate folders and files needed by airflow&lt;/span&gt;
airflow db init

&lt;span class=&quot;c&quot;&gt;# create user&lt;/span&gt;
docker-compose run airflow-worker &lt;span class=&quot;nb&quot;&gt;users &lt;/span&gt;create &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; zsu &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; abcd &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; jisu &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; park &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; Admin &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; carl020958@korea.ac.kr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ref&quot;&gt;ref&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://airflow.apache.org/docs/apache-airflow/2.1.4/start/docker.html&quot;&gt;🔗 공식 문서&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jybaek.tistory.com/922&quot;&gt;🔗 참고 블로그&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://devbull.xyz/python-create-environment/&quot;&gt;🔗 가상환경 관련&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>ZSU</name></author><category term="AIRFLOW" /><category term="AIRFLOW" /><category term="DOCKER" /><summary type="html">Airflow on Docker Docker을 통한 Apache Airflow 설치</summary></entry><entry><title type="html">[Postgres] Jupyter Notebook &amp;amp; Docker Postgres 연동</title><link href="http://localhost:4000/sql/postgres_python1/" rel="alternate" type="text/html" title="[Postgres] Jupyter Notebook &amp;amp; Docker Postgres 연동" /><published>2021-12-28T00:00:00+09:00</published><updated>2021-12-28T00:00:00+09:00</updated><id>http://localhost:4000/sql/postgres_python1</id><content type="html" xml:base="http://localhost:4000/sql/postgres_python1/">&lt;h3 id=&quot;환경구성&quot;&gt;환경구성&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;install psycopg2 in Jupyter notebook&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;psycopg2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# !conda install --yes --prefix {sys.prefix} requests
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;연결&quot;&gt;연결&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;connect DB&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;psycopg2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_ext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postgresql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;carl020958&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1234&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5432&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testDB&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;'Connected: carl020958@testDB' ---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;table-생성&quot;&gt;Table 생성&lt;/h3&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;%%&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sql&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name_geschlecht&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name_geschlecht&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;geschlecht&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; * postgresql://carl020958:***@0.0.0.0:5432/testDB
Done.
Done.
[]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;connection--etl-function&quot;&gt;Connection &amp;amp; ETL function&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_postgres_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;carl020958&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1234&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;5432&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dbname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;testDB&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;psycopg2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dbname={dbname} user={user} host={host} password={password} port={port}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dbname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autocommit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transform_load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_postgres_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;delete_sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;DELETE FROM name_geschlecht&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;name_geschlecht&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itertuples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;geschlecht&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;geschlecht&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;INSERT INTO name_geschlecht VALUES('{n}', '{g}')&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;geschlecht&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;execute&quot;&gt;Execute&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dataframe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test.csv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    name  gender
0    hee       F
1     su       M
2    min  Unisex
3     ji       M
4  young       F
5     ae  Unisex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;transform_load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hee - F
INSERT INTO name_geschlecht VALUES('hee', 'F')
su - M
INSERT INTO name_geschlecht VALUES('su', 'M')
min - Unisex
INSERT INTO name_geschlecht VALUES('min', 'Unisex')
ji - M
INSERT INTO name_geschlecht VALUES('ji', 'M')
young - F
INSERT INTO name_geschlecht VALUES('young', 'F')
ae - Unisex
INSERT INTO name_geschlecht VALUES('ae', 'Unisex')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- 확인&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%%&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sql&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name_geschlecht&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; * postgresql://carl020958:***@0.0.0.0:5432/testDB
6 rows affected.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;name&lt;/th&gt;
            &lt;th&gt;geschlecht&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;hee&lt;/td&gt;
            &lt;td&gt;F&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;su&lt;/td&gt;
            &lt;td&gt;M&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;min&lt;/td&gt;
            &lt;td&gt;Unisex&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;ji&lt;/td&gt;
            &lt;td&gt;M&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;young&lt;/td&gt;
            &lt;td&gt;F&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;ae&lt;/td&gt;
            &lt;td&gt;Unisex&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>ZSU</name></author><category term="SQL" /><category term="POSTGRES" /><category term="DOCKER" /><summary type="html">환경구성 install psycopg2 in Jupyter notebook</summary></entry></feed>